{
  "Type": "AggregateException",
  "InnerException": {
  "Message": "The method or operation is not implemented.",
  "Source": "Speckle.Sdk.Serialization.Tests",
  "StackTrace": "at Speckle.Sdk.Serialization.Tests.Framework.ExceptionSendCacheManager.SaveObjects(IEnumerable`1 items)\r\n   at Speckle.Sdk.Serialisation.V2.Receive.ObjectLoader.SaveToCache(List`1 batch)\r\n   at Open.ChannelExtensions.<INTERNALIZED STACKTRACE>Extensions.<>c__DisplayClass98_0`1.<ReadAllConcurrently>b__0(T e)\r\n   at Open.ChannelExtensions.<INTERNALIZED STACKTRACE>Extensions.<>c__DisplayClass63_0`1.<ReadAllAsync>b__0(T e, Int64 _)\r\n   at Open.ChannelExtensions.<INTERNALIZED STACKTRACE>Extensions.ReadUntilCancelledAsync[T](<INTERNALIZED STACKTRACE>ChannelReader`1 reader, CancellationToken cancellationToken, Func`3 receiver, Boolean deferredExecution)\r\n   at Open.ChannelExtensions.<INTERNALIZED STACKTRACE>Extensions.ReadAllAsync[T](<INTERNALIZED STACKTRACE>ChannelReader`1 reader, Func`3 receiver, Boolean deferredExecution, CancellationToken cancellationToken)"
},
  "StackTrace": "at Speckle.Sdk.Dependencies.Serialization.ChannelLoader`1.CheckForExceptions()\nat Speckle.Sdk.Serialisation.V2.Receive.ObjectLoader.GetAndCache(String rootId, DeserializeProcessOptions options, CancellationToken cancellationToken)\nat Speckle.Sdk.Serialisation.V2.Receive.DeserializeProcess.Deserialize(String rootId)\n--- End of stack trace from previous location ---\nat Xunit.Assert.RecordExceptionAsync(Func`1 testCode)"
}
